#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var http = require('http');
var https = require('https');
var fs = require('fs');
var { generateSelfSignedCert } = require('../utils/ssl');
var { log } = require('../utils/logger');

/**
 * Get port from environment and store in Express.
 */

const callbackURL = new URL(process.env.JIRA_OAUTH_CALLBACK_URL);
const useHTTPS = callbackURL.protocol === 'https:';
var port = normalizePort(process.env.PORT || (useHTTPS ? '443' : '80'));
app.set('port', port);

/**
 * Create HTTP or HTTPS server.
 */

let server;

if (useHTTPS) {
    if (process.env.GENERATE_SSL_CERT === 'true') {
        generateSelfSignedCert();
        const options = {
            key: fs.readFileSync(process.env.SSL_KEY_PATH),
            cert: fs.readFileSync(process.env.SSL_CERT_PATH)
        };
        server = https.createServer(options, app);
    } else {
        const options = {
            key: fs.readFileSync(process.env.SSL_KEY_PATH),
            cert: fs.readFileSync(process.env.SSL_CERT_PATH)
        };
        server = https.createServer(options, app);
    }

    // Create HTTP server to redirect to HTTPS
    const httpServer = http.createServer((req, res) => {
        const host = req.headers.host.split(':')[0];
        const redirectPort = port === '443' ? '' : `:${port}`;
        log.http(`Redirecting to https://${host}${redirectPort}${req.url}`);
        res.writeHead(301, { Location: `https://${host}${redirectPort}${req.url}` });
        res.end();
    });

    httpServer.listen(80);
} else {
    server = http.createServer(app);
}

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
    var port = parseInt(val, 10);

    if (isNaN(port)) {
        // named pipe
        return val;
    }

    if (port >= 0) {
        // port number
        return port;
    }

    return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
    if (error.syscall !== 'listen') {
        throw error;
    }

    var bind = typeof port === 'string' ? 'Pipe ' + port : 'Port ' + port;

    // handle specific listen errors with friendly messages
    switch (error.code) {
        case 'EACCES':
            log.error(bind + ' requires elevated privileges');
            process.exit(1);
            break;
        case 'EADDRINUSE':
            log.error(bind + ' is already in use');
            process.exit(1);
            break;
        default:
            throw error;
    }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
    var addr = server.address();
    var bind = typeof addr === 'string' ? 'pipe ' + addr : 'port ' + addr.port;
    log.info('Listening on ' + bind);
}