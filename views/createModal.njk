{% macro modal(endpoint) %}
<!-- HTML structure for the modal form -->
<div class="modal unselectable modal-create">
  <div class="modal-content">
    <h2>Create work log</h2>
    <form
      class="modal-form"
      id="modal-form-create"
      method="POST"
      action="{{ endpoint }}"
    >
      <input type="hidden" name="workLogId-create" value="" />
      <input type="hidden" name="start-create" value="" />
      <input type="hidden" name="duration-create" value="" />
      <label for="issue-create">Issue:</label>
      <select id="issue-create" name="issue-create" required></select>
      <div class="search-options">
        <label for="search-in-jira">Search using jira (slow):</label>
        <input
          type="checkbox"
          id="search-in-jira"
          value="on"
          name="search-in-jira"
          onchange="reinitializeDropdown(!this.checked);"
        />
      </div>
      <label for="comment-create">Comment:</label>
      <textarea
        class="comment"
        id="comment-create"
        name="comment-create"
      ></textarea>
      <div class="buttons">
        <button id="cancel-btn-create" title="Cancel" type="button">✖️</button>
        <button
          class="primary"
          id="submit-btn-create"
          title="Submit"
          type="submit"
        >
          ☑️
        </button>
      </div>
    </form>
  </div>
</div>
<!-- JavaScript to show the modal and handle form submission -->
<script>
  var choicesCreate;  // choices.js instance


  function showCreateModal(start, end) {
    calendar.setOption('unselectAuto', false);
    hideUpdateModal();
    const startInput = document.querySelector('input[name="start-create"]');
    startInput.value = start.toISOString();

    const durationInput = document.querySelector('input[name="duration-create"]');
    durationInput.value = (end - start)/1000;

    const modal = document.querySelector('.modal-create');
    modal.style.display = 'block';

  }

  // Hide the modal
  function hideCreateModal() {
    const modal = document.querySelector('.modal-create');
    modal.style.display = 'none';
    calendar.unselect();
    calendar.setOption('unselectAuto', true);
  }

  function handleCreateSubmit(event) {
    showLoading();
    event.preventDefault();
    const form = document.getElementById('modal-form-create');
    const canSubmit = form.checkValidity();
    if (!canSubmit) {
      alert('Please select an issue !');
      return false;
    }
    const formData = new FormData(form);

    const reqBody = {
      issueId: formData.get("issue-create"),
      comment: formData.get("comment-create"),
      start: formData.get("start-create"),
      duration: formData.get("duration-create")
    };
    return fetch('{{ endpoint }}', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json'
      },
      body: JSON.stringify(reqBody)
    })
    .then(response => {
        // Handle the response
        hideLoading();
        resetControls();
        refreshEverything();
        
      })
      .catch(error => {
        handleError(error);
        console.log(error);
        // Handle errors
        hideLoading();
      });
  }
  // Add event listeners to the buttons
  const cancelBtnCreate = document.getElementById('cancel-btn-create');
  cancelBtnCreate.addEventListener('click', hideCreateModal);

  const submitBtnCreate = document.getElementById('submit-btn-create');
  submitBtnCreate.addEventListener('click', handleCreateSubmit);

  // Setup choices.js
  document.addEventListener('DOMContentLoaded', function() {
    initializeDropdown(!document.getElementById('search-in-jira').checked);
    reloadDropdownValues();

  });

  function initializeDropdown(clientSearch) {
    var choicesElement = document.getElementById('issue-create');
    choicesCreate = new Choices(choicesElement, {
      searchEnabled: true,
      searchFields: ["key","label"],
      itemSelectText: '',
      searchFloor: 3,
      shouldSort: true,
      searchChoices: clientSearch,
      shouldSortItems: true,
    });

    choicesElement.addEventListener('search', function(event) {
      searchDebounce();
    });
  }

  function reinitializeDropdown(clientSearch) {
    choicesCreate.destroy();
    initializeDropdown(clientSearch);
    reloadDropdownValues()
  }

  function reloadDropdownValues() {
    fetchOptions().then(options => {
      choicesCreate.setChoices(options, 'value', 'label', true);
    });
  }

  const searchDebounce = debounce(() => searchIssues(choicesCreate.input.value).then(options => {
    choicesCreate.setChoices(options, 'value', 'label', true);
  }), 300);

  function debounce(func, timeout = 300){
      let timer;
      return (...args) => {
          clearTimeout(timer);
          timer = setTimeout(() => { func.apply(this, args); }, timeout);
      };
  }

  // Fetch options for the 'Issue' dropdown
  function fetchOptions() {
      showLoading();
    var startDate = encodeURIComponent(new Date(calendar.view.activeStart).toISOString());
    var endDate = encodeURIComponent(new Date(calendar.view.activeEnd).toISOString());
    var searchInJira = document.getElementById('search-in-jira').checked;
    return fetch('/issues/user?start='+ startDate + '&end=' + endDate + "&searchInJira=" + searchInJira)
    .then((res) => res.json())
      .then(data => {
        var options = [];
        // Add options from the fetched data
        data.forEach(issue => {
            const option = {
              value: issue.id,
              label: issue.key + ' - ' +issue.summary,
              key: issue.key
            };
            options.push(option);
        });
          hideLoading();
        return options;
      })
      .catch(error => {
        // Handle errors
        handleError(error);
        hideLoading();
      });
  }

  function searchIssues(query) {
    var startDate = encodeURIComponent(new Date(calendar.view.activeStart).toISOString());
    var endDate = encodeURIComponent(new Date(calendar.view.activeEnd).toISOString());
    var searchInJira = document.getElementById('search-in-jira').checked;

  showLoading();
      return fetch('/issues/user?start='+ startDate + '&end=' + endDate + "&searchInJira=" + searchInJira + "&query=" + query)
    .then((res) => res.json())
      .then(data => {
        var options = [];
        // Add options from the fetched data
        data.forEach(issue => {
            const option = {
              value: issue.id,
              label: issue.key + ' - ' +issue.summary,
              key: issue.key
            };
            options.push(option);
        });
      hideLoading();
        return options;
      })
      .catch(error => {
        // Handle errors
        hideLoading();
        handleError(error);
      });
  }
</script>
{% endmacro %}
