
{% import "worklogModal.njk" as worklogModal %}
<!DOCTYPE html>
<html>
    <head>  
        <title>Plywood - Jira Worklog Management</title>
        <link href='/stylesheets/style.css' rel='stylesheet' />
        <meta http-equiv='Content-Security-Policy' content="font-src data:" />
        <meta http-equiv="Content-Type" content="text/html; charset=UTF-8" />
        <meta charset='utf-8' />
        <link
        rel="stylesheet"
        href="/stylesheets/choices.min.css"
        />

        <link type="image/png" sizes="96x96" rel="icon" href="/images/icons8-plywood-96.png">

        <script src="/javascripts/choices.min.js"></script>
        <script src='/javascripts/fullcalendar.min.js'></script>
        <script src="/javascripts/popper.min.js"></script>
        <script src="/javascripts/tooltip.min.js"></script>        
        <script src="/javascripts/moment.min.js" ></script>
        <script src="/javascripts/moment-duration-format.js"></script>
        
        <script>
        var calendar;
        document.addEventListener('DOMContentLoaded', function() {
            var calendarElement = document.getElementById('calendar');
            calendar = new FullCalendar.Calendar(calendarElement, {
                initialView: 'timeGridWeek',
                nowIndicator: true,
                customButtons: {
                    refreshBtn: {
                        text: 'ðŸ”„',
                        hint: 'Refresh work logs',
                        click: function() { calendar.refetchEvents(); }
                    }
                },
                height: 'calc(100vh - 60px)',
                eventColor: '#2a75fe',
                allDaySlot: false,
                weekends:false,
                headerToolbar: {
                    left: 'prev,today,next',
                    center: 'title',
                    right: 'refreshBtn,dayGridMonth,timeGridWeek,timeGridDay' // user can switch between the two
                },
                slotDuration:'00:15:00' ,
                slotLabelInterval: '01:00:00',
                selectable:true,
                selectMirror:true,
                businessHours: {
                    daysOfWeek: [ 1, 2, 3, 4, 5 ],

                    startTime: '08:00', // a start time
                    endTime: '17:00', // an end time 
                },
                scrollTime: '08:00',
                events: {
                    url: '/events',
                    method: 'GET',
                    failure: function(error) {
                        if(error && error.response && error.response.headers && error.response.headers.location && error.response.headers.location == "/auth/login") {
                            window.location.href = "/auth/login";
                        } else if(error && error.message && error.message=="NetworkError when attempting to fetch resource.") {
                            window.location.href = "/auth/login";
                        } else {
                            alert('there was an error while fetching events!');
                        }
                        
                    },
                    success: function(events) {
                        updateTotalTime(events);
                    }
                },
                datesSet: function(info) {
                    var visibleEvents = calendar.getEvents().filter(event => {
                        const s = info.start, e = info.end
                        if (event.start > e || event.end < s) return false
                        return true
                    })
                    updateTotalTime(visibleEvents);
                    refreshIssuesDropdown();
                    
                },
                eventResize: function(info) {
                    // use fetch to call /worklog with a PUT request, passing the new start time and calculated duration
                    fetch('/worklog/' + info.event.extendedProps.worklogId, {
                        method: 'PUT',
                        headers: {
                            'Content-Type': 'application/json'
                        },
                        body: JSON.stringify({
                            issueId: info.event.extendedProps.issueId,
                            start: info.event.start,
                            duration: (info.event.end - info.event.start)/1000
                        })
                    }).then(function(response) {

                    }).catch((error) => {
                        if(error && error.message && error.message=="NetworkError when attempting to fetch resource.") {
                            window.location.href = "/auth/login";
                        }
                        info.revert();
                    });
                },
                eventDrop: function(info) {
                    fetch('/worklog/' + info.event.extendedProps.worklogId, {
                        method: 'PUT',
                        headers: {
                            'Content-Type': 'application/json'
                        },
                        body: JSON.stringify({
                            issueId: info.event.extendedProps.issueId,
                            start: info.event.start,
                            duration: (info.event.end - info.event.start)/1000
                        })
                    }).then(function(response) {
                        

                    }).catch((error) => {
                        if(error && error.message && error.message=="NetworkError when attempting to fetch resource.") {
                            window.location.href = "/auth/login";
                        }
                        info.revert();
                    });
                },
                eventClick: function(info) {
                    showUpdateModal(info.event);
                },
                eventDidMount: function(info) {
                    var title = (info.event.extendedProps.issueKey || '') + ' ' + (info.event.extendedProps.issueSummary || '');
                    var tooltip = new Tooltip(info.el, {
                        title: title,
                        placement: 'top',
                        trigger: 'hover',
                        contaier: 'body',
                    });
                },
                unselectCancel: '.unselectable',
                select: function(info) {
                    showCreateModal(info.start, info.end);
                }
            });
            calendar.render();

            var slider = document.getElementById("zoom-range");
            slider.oninput = function() {
                var timeVal = this.value;

                if (timeVal < 10) {
                    timeVal = '0' + timeVal;
                }
                /*switch(this.value) {
                    case '1':
                        calendar.setOption('slotDuration', '00:30:00');
                    break;
                    case '2':
                        calendar.setOption('slotDuration', '00:20:00');
                    break;
                    case '3':
                        calendar.setOption('slotDuration', '00:15:00');
                    break;
                }*/
                calendar.setOption('slotDuration', '00:'+timeVal+':00');
                document.getElementById("zoom-output").innerHTML = this.value + " minutes / slot";
            }

            var weekendInput = document.getElementById("include-weekends");
            weekendInput.addEventListener("change", () => {
                 calendar.setOption('weekends', weekendInput.checked);
            });
        });

        function updateTotalTime(events) {
            var totalTime = 0;
            
            events.forEach((event) => {
                var duration = new Date(event.end) - new Date(event.start);
                totalTime = totalTime + duration;
            });
            
            var timeElement = document.getElementById('total-time-value');
            timeElement.innerHTML = moment.duration(totalTime).format("H [hour and] m [min]");
        }
        </script>
    </head>

    <body>
        {{ worklogModal.modalForm('/worklog/') }}
        <div id='calendar'></div>
        <footer class="unselectable">
            <div id='total-time'><h3>Total time : </h2><div id='total-time-value'></div></div>
            <div id='weekend-container'><input type="checkbox" id="include-weekends" name="include-weekends"><label for="include-weekends">Weekends</label></div>
            <div id='zoom-container'><input type="range" min="5" max="60" step="5" value="15" id="zoom-range" name="zoom-range"><output for="zoom-range" id="zoom-output">15 minutes / slot</output></div>
            <div class="about-section"><div class="icons-8"><a target="_blank" href="https://icons8.com/icon/4ONNYCMz9R42/plywood">Plywood</a> icon by <a target="_blank" href="https://icons8.com">Icons8</a></div>Software licensed under the <a target="_blank" href="https://opensource.org/license/MIT/">MIT License</a></div>
        </footer>
    </body>
</html>