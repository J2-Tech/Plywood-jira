{% macro modalForm(endpoint) %}
  <!-- HTML structure for the modal form -->
  <div class="modal unselectable modal-update">
    <div class="modal-content">
      <h2>Update work log</h2>
      <form class="modal-form" id="modal-form-update" method="PUT" action="{{ endpoint }}">
        <input type="hidden" name="workLogId-update" value="">
        <input type="hidden" name="start-update" value="">
        <input type="hidden" name="duration-update" value="">
        <label for="issue-update">Issue:</label>
        <input type="hidden" id="issue-update" name="issue-update">
        <div id="issue-label" style="text-align: center;" name="issue-label"  placeholder="No issue"></div>
        <label for="comment-update">Comment:</label>
        <textarea class="comment" id="comment-update" name="comment-update"></textarea>
        <div class="buttons">
          <button class="destructive" id="delete-btn-update" title="Delete" type="button">üóëÔ∏è</button>
          <button id="cancel-btn-update" title="Cancel" type="button">‚úñÔ∏è</button>
          <button class="primary" id="submit-btn-update" title="Submit" type="submit">‚òëÔ∏è</button>
        </div>
      </form>
    </div>
  </div>
  <div class="modal unselectable modal-create">
    <div class="modal-content">
      <h2>Create work log</h2>
      <form class="modal-form" id="modal-form-create" method="POST" action="{{ endpoint }}">
        <input type="hidden" name="workLogId-create" value="">
        <input type="hidden" name="start-create" value="">
        <input type="hidden" name="duration-create" value="">
        <label for="issue-create">Issue:</label>
        <select id="issue-create" name="issue-create" required>
        </select>
        <label for="comment-create">Comment:</label>
        <textarea class="comment" id="comment-create" name="comment-create"></textarea>
        <div class="buttons">
          <button id="cancel-btn-create" title="Cancel" type="button">‚úñÔ∏è</button>
          <button class="primary" id="submit-btn-create" title="Submit" type="submit">‚òëÔ∏è</button>
        </div>
      </form>
    </div>
  </div>
  <!-- JavaScript to show the modal and handle form submission -->
  <script>
    function handleResponse(response) {
        if (response.status === 302 && response.headers.get('Location') === '/auth/login') {
            window.location.href = response.headers.get('Location');
        } else {
            return response.json();
        }
    }

    var choicesCreate;  // choices.js instance
    // Show the modal when needed
    function showUpdateModal(eventObj) {
      hideCreateModal();
      const workLogId = eventObj.extendedProps.worklogId;
      const issueId = eventObj.extendedProps.issueId;
      const workLogIdInput = document.querySelector('input[name="workLogId-update"]');
      workLogIdInput.value = workLogId;

      const startInput = document.querySelector('input[name="start-update"]');
      startInput.value = eventObj.start.toISOString();

      const durationInput = document.querySelector('input[name="duration-update"]');
      durationInput.value = (eventObj.end - eventObj.start)/1000;

      const modal = document.querySelector('.modal-update');
      modal.style.display = 'block';

      return fetchWorkLog(workLogId, issueId);
    }

    function showCreateModal(start, end) {
      calendar.setOption('unselectAuto', false);
      hideUpdateModal();
      const startInput = document.querySelector('input[name="start-create"]');
      startInput.value = start.toISOString();

      const durationInput = document.querySelector('input[name="duration-create"]');
      durationInput.value = (end - start)/1000;

      const modal = document.querySelector('.modal-create');
      modal.style.display = 'block';
      
    }

    // Hide the modal
    function hideUpdateModal() {
      const modal = document.querySelector('.modal-update');
      modal.style.display = 'none';
    }

    // Hide the modal
    function hideCreateModal() {
      const modal = document.querySelector('.modal-create');
      modal.style.display = 'none';
      calendar.unselect();
      calendar.setOption('unselectAuto', true);
    }

    // Handle form submission
    function handleUpdateSubmit(event) {
      event.preventDefault();
      const form = document.getElementById('modal-form-update');
      const formData = new FormData(form);

      const reqBody = {
        issueId: formData.get("issue-update"),
        comment: formData.get("comment-update"),
        start: formData.get("start-update"),
        duration: formData.get("duration-update")
      };
      return fetch('{{ endpoint }}' +formData.get("workLogId-update"), {
        method: 'PUT',
        headers: {
          'Content-Type': 'application/json'
        },
        body: JSON.stringify(reqBody)
      }).then(handleResponse)
      .then(response => {
          // Handle the response
          resetControls();
          refreshEverything();
        })
        .catch(error => {
          console.log(error); 
          alert(error);
          // Handle errors
        });
    }

    function handleUpdateDelete(event) {
      event.preventDefault();
      const form = document.getElementById('modal-form-update');
      const formData = new FormData(form);

      if (confirm('Are you sure you want to delete this work log ?')) {
        return fetch('{{ endpoint }}' + formData.get("workLogId-update") + '?issueId=' + formData.get("issue-update"), {
        method: 'DELETE',
      }).then(handleResponse)
      .then(response => {
          // Handle the response
          resetControls();
          refreshEverything();
        })
        .catch(error => {
          console.log(error); 
          alert(error);
          // Handle errors
        });
      } else {
        return false;
      }

      
    }

    function handleCreateSubmit(event) {
      event.preventDefault();
      const form = document.getElementById('modal-form-create');
      const canSubmit = form.checkValidity();
      if (!canSubmit) {
        alert('Please select an issue !');
        return false;
      }
      const formData = new FormData(form);

      const reqBody = {
        issueId: formData.get("issue-create"),
        comment: formData.get("comment-create"),
        start: formData.get("start-create"),
        duration: formData.get("duration-create")
      };
      return fetch('{{ endpoint }}', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json'
        },
        body: JSON.stringify(reqBody)
      })
      .then(handleResponse)
      .then(response => {
          // Handle the response
          resetControls();
          refreshEverything();
        })
        .catch(error => {
          console.log(error); 
          alert(error);
          // Handle errors
        });
    }

    // Fetch options for the 'Issue' dropdown
    function fetchOptions() {
      var startDate = encodeURIComponent(new Date(calendar.view.activeStart).toISOString());
      var endDate = encodeURIComponent(new Date(calendar.view.activeEnd).toISOString());
      return fetch('/issues/user?start='+ startDate + '&end=' + endDate)
        .then(handleResponse)
        .then(data => {
          var options = [];
          // Add options from the fetched data
          data.forEach(issue => {
              const option = {
                value: issue.id,
                label: issue.key + ' - ' +issue.fields.summary
              };
              options.push(option);
          });

          return options;
        })
        .catch(error => {
          // Handle errors
          console.log(error);
          alert(error);
        });
    }

    function fetchIssue(issueId) {
      return fetch(`/issues/${issueId}`)
        .then(handleResponse)
        .catch(error => {
          // Handle errors
        });
    }

    function fetchWorkLog(workLogId, issueId) {
      fetch(`/worklog/${workLogId}?issueId=${issueId}`)
        .then(handleResponse)
        .then(data => {
          // Set the form values
          const issueInput = document.getElementById('issue-update');
          issueInput.value = data.issueId;
          fetchIssue(data.issueId).then((issue) => {
            const issueLabel = document.getElementById('issue-label');
            issueLabel.innerHTML = issue.key + ' ' + issue.fields.summary;
          });

          const commentInput = document.getElementById('comment-update');
          commentInput.value = data.comment || '';
        })
        .catch(error => {
          // Handle errors
        });
    }

    // Add event listeners to the buttons
    const cancelBtnUpdate = document.getElementById('cancel-btn-update');
    cancelBtnUpdate.addEventListener('click', hideUpdateModal);

    const submitBtnUpdate = document.getElementById('submit-btn-update');
    submitBtnUpdate.addEventListener('click', handleUpdateSubmit);

    const deleteBtnUpdate = document.getElementById('delete-btn-update');
    deleteBtnUpdate.addEventListener('click', handleUpdateDelete);

    const cancelBtnCreate = document.getElementById('cancel-btn-create');
    cancelBtnCreate.addEventListener('click', hideCreateModal);

    const submitBtnCreate = document.getElementById('submit-btn-create');
    submitBtnCreate.addEventListener('click', handleCreateSubmit);

    // Setup choices.js
    document.addEventListener('DOMContentLoaded', function() {
      choicesCreate = new Choices('#issue-create', {
        searchEnabled: true,
        itemSelectText: '',
        shouldSort: false,
      });

      choicesCreate.setChoices(async () => {
        const options = await fetchOptions();
        return options;
      });

    });


    function resetControls() {
      const updateWorkLogIdInput = document.querySelector('input[name="workLogId-update"]');
      updateWorkLogIdInput.value = '';

      const updateStartInput = document.querySelector('input[name="start-update"]');
      updateStartInput.value = '';

      const updateDurationInput = document.querySelector('input[name="duration-update"]');
      updateDurationInput.value = '';

      const updateCommentInput = document.getElementById('comment-update');
      updateCommentInput.value = '';

      const createWorkLogIdInput = document.querySelector('input[name="workLogId-create"]');
      createWorkLogIdInput.value = '';

      const createStartInput = document.querySelector('input[name="start-create"]');
      createStartInput.value = '';

      const createDurationInput = document.querySelector('input[name="duration-create"]');
      createDurationInput.value = '';

      const createCommentInput = document.getElementById('comment-create');
      createCommentInput.value = '';

      calendar.unselect();
      hideUpdateModal();
      hideCreateModal();

      choicesCreate.clearInput();
    }

    function refreshEverything() {
      calendar.refetchEvents();
      
      refreshIssuesDropdown();
    }

    function refreshIssuesDropdown() {
      if (choicesCreate) {
      choicesCreate.clearChoices();
      choicesCreate.setChoices(async () => {
        const options = await fetchOptions();
        return options;
      });
      }
    }

  </script>
{% endmacro %}