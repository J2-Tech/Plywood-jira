{% import "modals.njk" as modals %}
<!DOCTYPE html>
<html>
    <head>
        <title>{% block title %}Plywood - Jira Worklog Management{% endblock %}</title>
        <link href='/stylesheets/style.css' rel='stylesheet' />
        <meta http-equiv='Content-Security-Policy' content="font-src data:" />
        <meta http-equiv="Content-Type" content="text/html; charset=UTF-8" />
        <meta name="jira-url" content="{{ jiraUrl }}">
        <meta charset='utf-8' />
        <link rel="stylesheet" href="/stylesheets/choices.min.css" />
        <link type="image/png" sizes="96x96" rel="icon" href="/images/icons8-plywood-96.png">

        <script src="/javascripts/choices.min.js"></script>
        <script src="/javascripts/moment.min.js"></script>
        <script src="/javascripts/moment-duration-format.js"></script>
        <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
        {% block head %}{% endblock %}
    </head>
    <body>
        {{ modals.modals() }}

        {% block content %}{% endblock %}
        
        <!-- Notes Side Panel -->
        <div id="notesSidePanel" class="notes-side-panel">
            <!-- Objectives Area -->
            <div id="objectivesArea" class="objectives-area">
                <div class="objectives-header">
                    <h4>Objectives</h4>
                    <button id="toggleObjectives" class="toggle-objectives-btn" title="Toggle Objectives">‚ñº</button>
                </div>
                <div id="objectivesContent" class="objectives-content collapsed">
                    <div class="objectives-controls">
                        <div class="objective-input-group">
                            <input type="text" id="objectiveIssueSearch" placeholder="Search issues..." class="objective-search-input">
                            <button id="addObjective" class="add-objective-btn" title="Add Objective">+</button>
                        </div>
                    </div>
                    <div id="objectivesList" class="objectives-list">
                        <!-- Objectives will be added here dynamically -->
                    </div>
                </div>
            </div>
            
            <div class="notes-panel-header">
                <div class="notes-header-top">
                    <h3>Notes <span id="notesPanelContext"></span></h3>
                    <button id="closeNotesPanel" class="close-panel-button">&times;</button>
                </div>
                
                <!-- Tiptap Toolbar -->
                <div id="tiptapToolbar" class="tiptap-toolbar">
                    <button type="button" data-action="bold" title="Bold">B</button>
                    <button type="button" data-action="italic" title="Italic">I</button>
                    <button type="button" data-action="underline" title="Underline">U</button>
                    <button type="button" data-action="strike" title="Strike">S</button>
                    <span class="toolbar-divider"></span>
                    <button type="button" data-action="heading1" title="Heading 1">H1</button>
                    <button type="button" data-action="heading2" title="Heading 2">H2</button>
                    <button type="button" data-action="heading3" title="Heading 3">H3</button>
                    <span class="toolbar-divider"></span>
                    <button type="button" data-action="bulletList" title="Bullet List">‚Ä¢</button>
                    <button type="button" data-action="orderedList" title="Numbered List">1.</button>
                    <button type="button" data-action="taskList" title="Task List">‚òê</button>
                    <span class="toolbar-divider"></span>
                    <button type="button" data-action="codeBlock" title="Code Block">&lt;/&gt;</button>
                    <span class="toolbar-divider"></span>
                    <button type="button" data-action="link" title="Insert Link">üîó</button>
                    <button type="button" data-action="issueReference" title="Insert Issue Reference">üé´</button>
                    <span class="toolbar-divider"></span>
                    <button type="button" data-action="undo" title="Undo">‚Ü∂</button>
                    <button type="button" data-action="redo" title="Redo">‚Ü∑</button>
                </div>
            </div>
            
            <div class="notes-panel-content">
                <div id="notesLoading" class="loading-indicator">Loading notes...</div>
                <div id="saveIndicator" class="save-indicator hidden">Saving...</div>
                <div id="tiptapEditor" class="tiptap-editor"></div>
            </div>
        </div>
        
        <footer class="app-footer">
            <div class="footer-left">
                <div class="hamburger-menu">
                    <button id="menuButton" class="hamburger-button">‚ò∞</button>
                    <div id="menuContent" class="menu-content">
                        <div class="menu-item project-item">
                            <select id="headerProjectSelection" class="project-selector">
                                <option value="all">All Projects</option>
                            </select>
                        </div>
                        <div class="menu-item" onclick="window.location.href='/'">
                            <span>üìÖ Calendar</span>
                        </div>                        <div class="menu-item" onclick="window.location.href='/stats'">
                            <span>üìä Statistics</span>
                        </div>
                        <div class="menu-item" onclick="toggleConfigModal()">
                            <span>‚öôÔ∏è Settings</span>
                        </div>
                        <div class="menu-item" onclick="showAboutModal()">
                            <span>‚ÑπÔ∏è About</span>
                        </div>
                        <div class="menu-item" onclick="window.location.href='/auth/logout'">
                            <span>üö™ Logout</span>
                        </div>
                    </div>
                </div>
                {% block footer_left %}{% endblock %}
            </div>

            <div class="footer-center">
                <div id="total-time">
                    {% block footer_center %}{% endblock %}
                </div>
            </div>            <div class="footer-right">                <div id="loading-container">
                    <img id="loading" src="/images/icons8-dots-loading.gif" style="background-color:transparent"/>
                </div>
                {% block footer_right %}{% endblock %}
                <button id="toggleNotesButton" title="Toggle Notes Panel" onclick="toggleNotesPanel()" class="footer-icon-button">üìù</button>
            </div>
        </footer>        <script src="https://unpkg.com/@popperjs/core@2"></script>
        <script src="https://unpkg.com/tippy.js@6"></script>
        <!-- Non-module script for global functions -->
        <script src="/javascripts/notes-global.js"></script>
        <script src="/javascripts/notes-resizing.js"></script>
        <script src="/javascripts/notes-tiptap.js" type="module"></script>
        <script>
        // Legacy notes format handler - add to global scope
        window.convertLegacyNotes = function(notesData) {
            try {
                // If it's already HTML, return as is
                if (typeof notesData === 'string' && notesData.includes('<')) {
                    return notesData;
                }
                
                // If it's JSON from old format, try to parse and convert
                if (typeof notesData === 'string' && (notesData.startsWith('{') || notesData.startsWith('['))) {
                    const parsed = JSON.parse(notesData);
                    
                    // Handle EditorJS format
                    if (parsed.blocks && Array.isArray(parsed.blocks)) {
                        return parsed.blocks.map(block => {
                            if (block.type === 'paragraph') {
                                return `<p>${block.data.text || ''}</p>`;
                            }
                            return `<p>${block.data?.text || JSON.stringify(block)}</p>`;
                        }).join('');
                    }
                    
                    // Handle simple object with text
                    if (parsed.text) {
                        return `<p>${parsed.text}</p>`;
                    }
                    
                    // Fallback: convert to string
                    return `<p>${JSON.stringify(parsed)}</p>`;
                }
                
                // Handle plain text
                if (typeof notesData === 'string') {
                    return `<p>${notesData.replace(/\n/g, '</p><p>')}</p>`;
                }
                
                // Default fallback
                return '<p></p>';
            } catch (e) {
                console.warn('Failed to convert legacy notes:', e);
                return `<p>${notesData || ''}</p>`;
            }
        };
        
        // Fix toolbar button actions - ensure underline works correctly
        window.fixTiptapToolbar = function() {
            document.addEventListener('DOMContentLoaded', function() {
                const toolbar = document.getElementById('tiptapToolbar');
                if (toolbar) {
                    // Make sure the underline button triggers underline, not strikethrough
                    const underlineBtn = toolbar.querySelector('[data-action="underline"]');
                    if (underlineBtn) {
                        underlineBtn.setAttribute('data-action', 'underline');
                        underlineBtn.title = 'Underline';
                    }
                }
            });
        };
        
        window.fixTiptapToolbar();
        </script>
        <script src="/javascripts/plywood/ui.js" type="module"></script>
        <script src="/javascripts/plywood/modal.js" type="module"></script>
        <script src="/javascripts/plywood/objectives.js" type="module"></script>
        {% block scripts %}{% endblock %}
    </body>
</html>